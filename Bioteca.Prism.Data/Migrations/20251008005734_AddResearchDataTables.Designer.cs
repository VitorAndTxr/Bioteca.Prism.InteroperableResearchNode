// <auto-generated />
using System;
using System.Text.Json;
using Bioteca.Prism.Data.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bioteca.Prism.Data.Migrations
{
    [DbContext(typeof(PrismDbContext))]
    [Migration("20251008005734_AddResearchDataTables")]
    partial class AddResearchDataTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Application.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("app_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("ResearchId")
                        .HasColumnType("uuid")
                        .HasColumnName("research_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("url");

                    b.HasKey("ApplicationId");

                    b.HasIndex("ResearchId")
                        .HasDatabaseName("ix_application_research_id");

                    b.ToTable("application", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Device.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("device_name");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("model");

                    b.Property<Guid>("ResearchId")
                        .HasColumnType("uuid")
                        .HasColumnName("research_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("DeviceId");

                    b.HasIndex("ResearchId")
                        .HasDatabaseName("ix_device_research_id");

                    b.ToTable("device", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Node.ResearchNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("certificate");

                    b.Property<string>("CertificateFingerprint")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("certificate_fingerprint");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("contact_info");

                    b.Property<string>("InstitutionDetails")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("institution_details");

                    b.Property<DateTime?>("LastAuthenticatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_authenticated_at");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("NodeAccessLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("node_access_level");

                    b.Property<string>("NodeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("node_name");

                    b.Property<string>("NodeUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("node_url");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registered_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CertificateFingerprint")
                        .IsUnique()
                        .HasDatabaseName("ix_research_nodes_certificate_fingerprint");

                    b.HasIndex("LastAuthenticatedAt")
                        .HasDatabaseName("ix_research_nodes_last_authenticated_at");

                    b.HasIndex("NodeAccessLevel")
                        .HasDatabaseName("ix_research_nodes_access_level");

                    b.HasIndex("RegisteredAt")
                        .HasDatabaseName("ix_research_nodes_registered_at");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_research_nodes_status");

                    b.ToTable("research_nodes", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Record.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CollectionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("collection_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("RecordSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("record_session_id");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("record_type");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CollectionDate")
                        .HasDatabaseName("ix_record_collection_date");

                    b.HasIndex("RecordSessionId")
                        .HasDatabaseName("ix_record_record_session_id");

                    b.HasIndex("RecordType")
                        .HasDatabaseName("ix_record_record_type");

                    b.ToTable("record", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Record.RecordChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<JsonDocument>("Annotations")
                        .HasColumnType("jsonb")
                        .HasColumnName("annotations");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("file_url");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid")
                        .HasColumnName("record_id");

                    b.Property<int>("SamplesCount")
                        .HasColumnType("integer")
                        .HasColumnName("samples_count");

                    b.Property<float>("SamplingRate")
                        .HasColumnType("real")
                        .HasColumnName("sampling_rate");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uuid")
                        .HasColumnName("sensor_id");

                    b.Property<string>("SignalType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("signal_type");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("RecordId")
                        .HasDatabaseName("ix_record_channel_record_id");

                    b.HasIndex("SensorId")
                        .HasDatabaseName("ix_record_channel_sensor_id");

                    b.HasIndex("SignalType")
                        .HasDatabaseName("ix_record_channel_signal_type");

                    b.ToTable("record_channel", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Record.RecordSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClinicalContext")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("clinical_context");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finished_at");

                    b.Property<Guid>("ResearchId")
                        .HasColumnType("uuid")
                        .HasColumnName("research_id");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_id");

                    b.HasKey("Id");

                    b.HasIndex("ResearchId")
                        .HasDatabaseName("ix_record_session_research_id");

                    b.HasIndex("StartAt")
                        .HasDatabaseName("ix_record_session_start_at");

                    b.HasIndex("VolunteerId")
                        .HasDatabaseName("ix_record_session_volunteer_id");

                    b.ToTable("record_session", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Record.TargetArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BodyStructureCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("body_structure_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LateralityCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("laterality_code");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("RecordChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("record_channel_id");

                    b.Property<string>("TopographicalModifierCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("topographical_modifier_code");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BodyStructureCode")
                        .HasDatabaseName("ix_target_area_body_structure_code");

                    b.HasIndex("LateralityCode");

                    b.HasIndex("RecordChannelId")
                        .HasDatabaseName("ix_target_area_record_channel_id");

                    b.HasIndex("TopographicalModifierCode");

                    b.ToTable("target_area", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Research.Research", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("ResearchNodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("research_node_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ResearchNodeId")
                        .HasDatabaseName("ix_research_node_id");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("ix_research_start_date");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_research_status");

                    b.ToTable("research", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Research.ResearchResearcher", b =>
                {
                    b.Property<Guid>("ResearchId")
                        .HasColumnType("uuid")
                        .HasColumnName("research_id");

                    b.Property<Guid>("ResearcherId")
                        .HasColumnType("uuid")
                        .HasColumnName("researcher_id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_principal");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed_at");

                    b.HasKey("ResearchId", "ResearcherId");

                    b.HasIndex("AssignedAt")
                        .HasDatabaseName("ix_research_researcher_assigned_at");

                    b.HasIndex("IsPrincipal")
                        .HasDatabaseName("ix_research_researcher_is_principal");

                    b.HasIndex("ResearcherId");

                    b.ToTable("research_researcher", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Research.ResearchVolunteer", b =>
                {
                    b.Property<Guid>("ResearchId")
                        .HasColumnType("uuid")
                        .HasColumnName("research_id");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_id");

                    b.Property<DateTime>("ConsentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consent_date");

                    b.Property<string>("ConsentVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("consent_version");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrolled_at");

                    b.Property<string>("EnrollmentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("enrollment_status");

                    b.Property<string>("ExclusionReason")
                        .HasColumnType("text")
                        .HasColumnName("exclusion_reason");

                    b.Property<DateTime?>("WithdrawnAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("withdrawn_at");

                    b.HasKey("ResearchId", "VolunteerId");

                    b.HasIndex("EnrolledAt")
                        .HasDatabaseName("ix_research_volunteer_enrolled_at");

                    b.HasIndex("EnrollmentStatus")
                        .HasDatabaseName("ix_research_volunteer_enrollment_status");

                    b.HasIndex("VolunteerId");

                    b.ToTable("research_volunteer", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Researcher.Researcher", b =>
                {
                    b.Property<Guid>("ResearcherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("researcher_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("institution");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("ResearchNodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("research_node_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ResearcherId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_researcher_email");

                    b.HasIndex("ResearchNodeId")
                        .HasDatabaseName("ix_researcher_research_node_id");

                    b.ToTable("researcher", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Sensor.Sensor", b =>
                {
                    b.Property<Guid>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("sensor_id");

                    b.Property<float>("Accuracy")
                        .HasColumnType("real")
                        .HasColumnName("accuracy");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<float>("MaxRange")
                        .HasColumnType("real")
                        .HasColumnName("max_range");

                    b.Property<float>("MaxSamplingRate")
                        .HasColumnType("real")
                        .HasColumnName("max_sampling_rate");

                    b.Property<float>("MinRange")
                        .HasColumnType("real")
                        .HasColumnName("min_range");

                    b.Property<string>("SensorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sensor_name");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("unit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("SensorId");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_sensor_device_id");

                    b.ToTable("sensor", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Snomed.SnomedBodyRegion", b =>
                {
                    b.Property<string>("SnomedCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("snomed_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ParentRegionCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("parent_region_code");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("SnomedCode");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_snomed_body_region_is_active");

                    b.HasIndex("ParentRegionCode")
                        .HasDatabaseName("ix_snomed_body_region_parent_region_code");

                    b.ToTable("snomed_body_region", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Snomed.SnomedBodyStructure", b =>
                {
                    b.Property<string>("SnomedCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("snomed_code");

                    b.Property<string>("BodyRegionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("body_region_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ParentStructureCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("parent_structure_code");

                    b.Property<string>("StructureType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("structure_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("SnomedCode");

                    b.HasIndex("BodyRegionCode")
                        .HasDatabaseName("ix_snomed_body_structure_body_region_code");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_snomed_body_structure_is_active");

                    b.HasIndex("ParentStructureCode")
                        .HasDatabaseName("ix_snomed_body_structure_parent_structure_code");

                    b.HasIndex("StructureType")
                        .HasDatabaseName("ix_snomed_body_structure_structure_type");

                    b.ToTable("snomed_body_structure", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Snomed.SnomedLaterality", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Code");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_snomed_laterality_is_active");

                    b.ToTable("snomed_laterality", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Snomed.SnomedTopographicalModifier", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Code");

                    b.HasIndex("Category")
                        .HasDatabaseName("ix_snomed_topographical_modifier_category");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_snomed_topographical_modifier_is_active");

                    b.ToTable("snomed_topographical_modifier", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Volunteer.Volunteer", b =>
                {
                    b.Property<Guid>("VolunteerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("blood_type");

                    b.Property<string>("ConsentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("consent_status");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrolled_at");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gender");

                    b.Property<float?>("Height")
                        .HasColumnType("real")
                        .HasColumnName("height");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medical_history");

                    b.Property<Guid>("ResearchNodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("research_node_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VolunteerCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("volunteer_code");

                    b.Property<float?>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.HasKey("VolunteerId");

                    b.HasIndex("ConsentStatus")
                        .HasDatabaseName("ix_volunteer_consent_status");

                    b.HasIndex("ResearchNodeId")
                        .HasDatabaseName("ix_volunteer_research_node_id");

                    b.HasIndex("VolunteerCode")
                        .IsUnique()
                        .HasDatabaseName("ix_volunteer_code");

                    b.ToTable("volunteer", (string)null);
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Application.Application", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Research.Research", "Research")
                        .WithMany("Applications")
                        .HasForeignKey("ResearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Research");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Device.Device", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Research.Research", "Research")
                        .WithMany("Devices")
                        .HasForeignKey("ResearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Research");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Record.Record", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Record.RecordSession", "RecordSession")
                        .WithMany("Records")
                        .HasForeignKey("RecordSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecordSession");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Record.RecordChannel", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Record.Record", "Record")
                        .WithMany("RecordChannels")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bioteca.Prism.Domain.Entities.Sensor.Sensor", "Sensor")
                        .WithMany("RecordChannels")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Record");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Record.RecordSession", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Research.Research", "Research")
                        .WithMany("RecordSessions")
                        .HasForeignKey("ResearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bioteca.Prism.Domain.Entities.Volunteer.Volunteer", "Volunteer")
                        .WithMany("RecordSessions")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Research");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Record.TargetArea", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Snomed.SnomedBodyStructure", "BodyStructure")
                        .WithMany("TargetAreas")
                        .HasForeignKey("BodyStructureCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bioteca.Prism.Domain.Entities.Snomed.SnomedLaterality", "Laterality")
                        .WithMany("TargetAreas")
                        .HasForeignKey("LateralityCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bioteca.Prism.Domain.Entities.Record.RecordChannel", "RecordChannel")
                        .WithMany("TargetAreas")
                        .HasForeignKey("RecordChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bioteca.Prism.Domain.Entities.Snomed.SnomedTopographicalModifier", "TopographicalModifier")
                        .WithMany("TargetAreas")
                        .HasForeignKey("TopographicalModifierCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BodyStructure");

                    b.Navigation("Laterality");

                    b.Navigation("RecordChannel");

                    b.Navigation("TopographicalModifier");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Research.Research", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Node.ResearchNode", "ResearchNode")
                        .WithMany()
                        .HasForeignKey("ResearchNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchNode");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Research.ResearchResearcher", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Research.Research", "Research")
                        .WithMany("ResearchResearchers")
                        .HasForeignKey("ResearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bioteca.Prism.Domain.Entities.Researcher.Researcher", "Researcher")
                        .WithMany("ResearchResearchers")
                        .HasForeignKey("ResearcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Research");

                    b.Navigation("Researcher");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Research.ResearchVolunteer", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Research.Research", "Research")
                        .WithMany("ResearchVolunteers")
                        .HasForeignKey("ResearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bioteca.Prism.Domain.Entities.Volunteer.Volunteer", "Volunteer")
                        .WithMany("ResearchVolunteers")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Research");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Researcher.Researcher", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Node.ResearchNode", "ResearchNode")
                        .WithMany()
                        .HasForeignKey("ResearchNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchNode");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Sensor.Sensor", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Device.Device", "Device")
                        .WithMany("Sensors")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Snomed.SnomedBodyRegion", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Snomed.SnomedBodyRegion", "ParentRegion")
                        .WithMany("SubRegions")
                        .HasForeignKey("ParentRegionCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentRegion");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Snomed.SnomedBodyStructure", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Snomed.SnomedBodyRegion", "BodyRegion")
                        .WithMany("BodyStructures")
                        .HasForeignKey("BodyRegionCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bioteca.Prism.Domain.Entities.Snomed.SnomedBodyStructure", "ParentStructure")
                        .WithMany("SubStructures")
                        .HasForeignKey("ParentStructureCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BodyRegion");

                    b.Navigation("ParentStructure");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Volunteer.Volunteer", b =>
                {
                    b.HasOne("Bioteca.Prism.Domain.Entities.Node.ResearchNode", "ResearchNode")
                        .WithMany()
                        .HasForeignKey("ResearchNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResearchNode");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Device.Device", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Record.Record", b =>
                {
                    b.Navigation("RecordChannels");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Record.RecordChannel", b =>
                {
                    b.Navigation("TargetAreas");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Record.RecordSession", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Research.Research", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Devices");

                    b.Navigation("RecordSessions");

                    b.Navigation("ResearchResearchers");

                    b.Navigation("ResearchVolunteers");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Researcher.Researcher", b =>
                {
                    b.Navigation("ResearchResearchers");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Sensor.Sensor", b =>
                {
                    b.Navigation("RecordChannels");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Snomed.SnomedBodyRegion", b =>
                {
                    b.Navigation("BodyStructures");

                    b.Navigation("SubRegions");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Snomed.SnomedBodyStructure", b =>
                {
                    b.Navigation("SubStructures");

                    b.Navigation("TargetAreas");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Snomed.SnomedLaterality", b =>
                {
                    b.Navigation("TargetAreas");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Snomed.SnomedTopographicalModifier", b =>
                {
                    b.Navigation("TargetAreas");
                });

            modelBuilder.Entity("Bioteca.Prism.Domain.Entities.Volunteer.Volunteer", b =>
                {
                    b.Navigation("RecordSessions");

                    b.Navigation("ResearchVolunteers");
                });
#pragma warning restore 612, 618
        }
    }
}
